/* eslint-disable */
import tile from './shared/tile.js';
import ptcl from './shared/ptcl.js';
import drawtag from './shared/drawtag.js';
import bump from './shared/bump.js';
import config from './shared/config.js';

export default `${config}
${bump}
${drawtag}
${ptcl}
${tile}
@group(0)@binding(0)var<uniform>_m:_aG;@group(0)@binding(1)var<storage>_n:array<u32>;@group(0)@binding(2)var<storage>_bS:array<_aF>;struct _fb{_aB:u32,_bs:u32}@group(0)@binding(3)var<storage>_hH:array<_fb>;@group(0)@binding(4)var<storage>_dp:array<u32>;@group(0)@binding(5)var<storage>_M:array<_aL>;@group(0)@binding(6)var<storage>_w:array<_aK>;@group(0)@binding(7)var<storage,read_write>_ah:_eu;@group(0)@binding(8)var<storage,read_write>_q:array<u32>;const _j=256u;const _cc=8u;var<workgroup>_br:array<array<atomic<u32>,_H>,_cc>;var<workgroup>_bB:array<u32,_j>;var<workgroup>_fX:array<u32,_j>;var<workgroup>_do:array<u32,_j>;var<workgroup>_eV:array<u32,_j>;var<workgroup>_fW:array<u32,_j>;var<workgroup>_fV:array<u32,_j>;var<workgroup>_aZ:array<u32,_j>;var<workgroup>_eU:array<u32,_j>;var<private>_A:u32;var<private>_eT:u32;fn _cH(_F:u32){if _A+_F>=_eT{let _hP=_m._aC*_m._cA*_ei;var _dW=_hP+atomicAdd(&_ah._q,_fh);if _dW+_fh>_m._in{_dW=0u;atomicOr(&_ah._ac,_iv);}_q[_A]=_gt;_q[_A+1u]=_dW;_A=_dW;_eT=_A+(_fh-_gD);}}fn _ds(_a:_aK,_L:f32)->bool{_cH(3u);if _L<0.{let _cG=_L<-1.;if _a._R!=0u{let _bb=_fj(_a._R,_a._B);_q[_A]=_gC;let _hO=select(_bb._a<<1u,(_bb._a<<1u)|1u,_cG);_q[_A+1u]=_hO;_q[_A+2u]=u32(_bb._B);_A+=3u;}else{if _cG&&(abs(_a._B)&1)==0{return false;}_q[_A]=_gA;_A+=1u;}}else{let _an=_fi(_a._R,.5*_L);_q[_A]=_gB;_q[_A+1u]=_an._a;_q[_A+2u]=bitcast<u32>(_an._cP);_A+=3u;}return true;}fn _hT(_l:_ek){_cH(2u);_q[_A]=_gz;_q[_A+1u]=_l._cO;_A+=2u;}fn _gb(ty:u32,_am:u32,_N:u32){_cH(3u);_q[_A]=ty;_q[_A+1u]=_am;_q[_A+2u]=_N;_A+=3u;}fn _hS(_N:u32){_cH(2u);_q[_A]=_gw;_q[_A+1u]=_N;_A+=2u;}fn _hR(){_cH(1u);_q[_A]=_gv;_A+=1u;}fn _hQ(_I:_ej){_cH(23u);_q[_A]=_gu;_q[_A+1u]=_I._K;_q[_A+2u]=bitcast<u32>(_I._bx.x);_q[_A+3u]=bitcast<u32>(_I._bx.y);_q[_A+4u]=bitcast<u32>(_I._bx.z);_q[_A+5u]=bitcast<u32>(_I._bx.w);_q[_A+6u]=bitcast<u32>(_I._bw.x);_q[_A+7u]=bitcast<u32>(_I._bw.y);_q[_A+8u]=bitcast<u32>(_I._bw.z);_q[_A+9u]=bitcast<u32>(_I._bw.w);_q[_A+10u]=bitcast<u32>(_I._bv.x);_q[_A+11u]=bitcast<u32>(_I._bv.y);_q[_A+12u]=bitcast<u32>(_I._bv.z);_q[_A+13u]=bitcast<u32>(_I._bv.w);_q[_A+14u]=bitcast<u32>(_I._aV.x);_q[_A+15u]=bitcast<u32>(_I._aV.y);_q[_A+16u]=bitcast<u32>(_I._aV.z);_q[_A+17u]=bitcast<u32>(_I._aV.w);_q[_A+18u]=bitcast<u32>(_I._bi.x);_q[_A+19u]=bitcast<u32>(_I._bi.y);_q[_A+20u]=bitcast<u32>(_I._bi.z);_q[_A+21u]=bitcast<u32>(_I._bi.w);_q[_A+22u]=select(0u,1u,_I._cN);_A+=23u;}@compute @workgroup_size(256)fn main(@builtin(local_invocation_id)_f:vec3<u32>,@builtin(workgroup_id)_aj:vec3<u32>,){if _f.x==0u{_bB[0]=atomicLoad(&_ah._ac);}let _ac=workgroupUniformLoad(&_bB[0]);if(_ac&(_et|_fp|_gV))!=0u{return;}let _cK=(_m._aC+_bd- 1u)/_bd;let _dv=_cK*_aj.y+_aj.x;let _ea=(_m._cz+_H- 1u)/_H;let _dZ=_bd*_aj.x;let _dY=_cB*_aj.y;let _ay=_f.x % _bd;let _aI=_f.x/_bd;let _hN=(_dY+_aI)*_m._aC+_dZ+_ay;_A=_hN*_ei;_eT=_A+(_ei-_gD);var _dV=0u;var _ba=0u;var _cF=0u;var _ct=0u;var _cs=0u;var _eX=0u;var _bZ=0u;var _eW=0u;var _dU=0u;let _ga=_A;_A+=1u;while true{for(var i=0u;i<_cc;i+=1u){atomicStore(&_br[i][_f.x],0u);}while true{if _bZ==_cs&&_cF<_ea{_eX=_bZ;var _k=0u;if _cF+_f.x<_ea{let _cu=(_cF+_f.x)*_H+_dv;let _cv=_hH[_cu];_k=_cv._aB;_fX[_f.x]=_cv._bs;}for(var i=0u;i<firstTrailingBit(_j);i+=1u){_bB[_f.x]=_k;workgroupBarrier();if _f.x>=(1u<<i){_k+=_bB[_f.x-(1u<<i)];}workgroupBarrier();}_bB[_f.x]=_eX+_k;_bZ=workgroupUniformLoad(&_bB[_j- 1u]);_cF+=_j;}var ix=_ct+_f.x;if ix>=_cs&&ix<_bZ{var _dq=0u;for(var i=0u;i<firstTrailingBit(_j);i+=1u){let _bu=_dq+((_H/2u)>>i);if ix>=_bB[_bu- 1u]{_dq=_bu;}}ix-=select(_eX,_bB[_dq- 1u],_dq>0u);let _d=_m._gO+_fX[_dq];_do[_f.x]=_dp[_d+ix];}_cs=min(_ct+_H,_bZ);if _cs-_ct>=_H||(_cs>=_bZ&&_cF>=_ea){break;}}var _e=_cy;var _ab:u32;if _f.x+_ct<_cs{_ab=_do[_f.x];_e=_n[_m._cS+_ab];}var _X=0u;if _e!=_cy{let _P=_bS[_ab]._P;let _c=_M[_P];let _bR=_c._b.z-_c._b.x;_eV[_f.x]=_bR;let dx=i32(_c._b.x)-i32(_dZ);let dy=i32(_c._b.y)-i32(_dY);let x0=clamp(dx,0,i32(_bd));let y0=clamp(dy,0,i32(_cB));let x1=clamp(i32(_c._b.z)-i32(_dZ),0,i32(_bd));let y1=clamp(i32(_c._b.w)-i32(_dY),0,i32(_cB));_fW[_f.x]=u32(x1-x0);_fV[_f.x]=u32(x0)|u32(y0<<16u);_X=u32(x1-x0)*u32(y1-y0);let _t=_c._w-u32(dy*i32(_bR)+dx);_eU[_f.x]=_t;}_aZ[_f.x]=_X;for(var i=0u;i<firstTrailingBit(_H);i+=1u){workgroupBarrier();if _f.x>=(1u<<i){_X+=_aZ[_f.x-(1u<<i)];}workgroupBarrier();_aZ[_f.x]=_X;}workgroupBarrier();let _dX=_aZ[_H- 1u];for(var ix=_f.x;ix<_dX;ix+=_H){var _al=0u;for(var i=0u;i<firstTrailingBit(_H);i+=1u){let _bu=_al+((_H/2u)>>i);if ix>=_aZ[_bu- 1u]{_al=_bu;}}_ab=_do[_al];_e=_n[_m._cS+_ab];let _eg=ix-select(0u,_aZ[_al- 1u],_al>0u);let _p=_fW[_al];let _dr=_fV[_al];let x=(_dr&0xffffu)+_eg % _p;let y=(_dr>>16u)+_eg/_p;let _ar=_eU[_al]+_eV[_al]*y+x;let _a=_w[_ar];let _fZ=(_e&1u)!=0u;var _fY=false;if _fZ{let _hM=(128u<<8u)|3u;let _by=_bS[_ab]._by;let dd=_m._fn+_by;let _K=_n[dd];_fY=_K!=_hM;}let _hL=_a._R!=0u||(_a._B==0)==_fZ||_fY;if _hL{let _hK=_al/32u;let _hJ=1u<<(_al&31u);atomicOr(&_br[_hK][y*_bd+x],_hJ);}}workgroupBarrier();var _dT=0u;var _ax=atomicLoad(&_br[0u][_f.x]);while true{if _ax==0u{_dT+=1u;if _dT==_cc{break;}_ax=atomicLoad(&_br[_dT][_f.x]);if _ax==0u{continue;}}let _al=_dT*32u+firstTrailingBit(_ax);_ab=_do[_al];_ax&=_ax- 1u;let _au=_n[_m._cS+_ab];let dm=_bS[_ab];let dd=_m._fn+dm._by;let di=dm._N;if _dV==0u{let _ar=_eU[_al]+_eV[_al]*_aI+_ay;let _a=_w[_ar];switch _au{case 0x42u:{let _L=bitcast<f32>(_dp[di]);if _ds(_a,_L){let _cO=_n[dd];_hT(_ek(_cO));}}case 0x10au:{let _L=bitcast<f32>(_dp[di]);if _ds(_a,_L){let _am=_n[dd];let _N=di+1u;_gb(_gy,_am,_N);}}case 0x28eu:{let _L=bitcast<f32>(_dp[di]);if _ds(_a,_L){let _am=_n[dd];let _N=di+1u;_gb(_gx,_am,_N);}}case 0x244u:{let _L=bitcast<f32>(_dp[di]);if _ds(_a,_L){_hS(di+1u);}}case 0x2bu:{if _a._R==0u&&_a._B==0{_dV=_ba+1u;}else{_hR();_eW+=1u;_dU=max(_dU,_eW);}_ba+=1u;}case 0x401u:{_ba-=1u;_ds(_a,-1.);let _K=_n[dd];let _bx=vec4(bitcast<f32>(_n[dd+1u]),bitcast<f32>(_n[dd+2u]),bitcast<f32>(_n[dd+3u]),bitcast<f32>(_n[dd+4u]));let _bw=vec4(bitcast<f32>(_n[dd+5u]),bitcast<f32>(_n[dd+6u]),bitcast<f32>(_n[dd+7u]),bitcast<f32>(_n[dd+8u]));let _bv=vec4(bitcast<f32>(_n[dd+9u]),bitcast<f32>(_n[dd+10u]),bitcast<f32>(_n[dd+11u]),bitcast<f32>(_n[dd+12u]));let _aV=vec4(bitcast<f32>(_n[dd+13u]),bitcast<f32>(_n[dd+14u]),bitcast<f32>(_n[dd+15u]),bitcast<f32>(_n[dd+16u]));let _bi=vec4(bitcast<f32>(_n[dd+17u]),bitcast<f32>(_n[dd+18u]),bitcast<f32>(_n[dd+19u]),bitcast<f32>(_n[dd+20u]));let _cN=_bx.a!=0.||_bw.a!=0.||_bv.a!=0.||_aV.r!=0.||_aV.g!=0.||_aV.b!=0.||_aV.a!=1.||_bi.a!=0.;_hQ(_ej(_K,_bx,_bw,_bv,_aV,_bi,_cN));_eW-=1u;}default:{}}}else{switch _au{case 0x2bu:{_ba+=1u;}case 0x401u:{if _ba==_dV{_dV=0u;}_ba-=1u;}default:{}}}}_ct+=_H;if _ct>=_bZ&&_cF>=_ea{break;}workgroupBarrier();}if _dZ+_ay<_m._aC&&_dY+_aI<_m._cA{_q[_A]=_dz;if _dU>_er{let _hI=_dU*_cC*_bk;_q[_ga]=atomicAdd(&_ah._K,_hI);}}}`
