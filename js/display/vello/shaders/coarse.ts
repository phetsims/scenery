/* eslint-disable */
import tile from './shared/tile.js';
import ptcl from './shared/ptcl.js';
import drawtag from './shared/drawtag.js';
import bump from './shared/bump.js';
import config from './shared/config.js';

export default `${config}
${bump}
${drawtag}
${ptcl}
${tile}
@group(0)@binding(0)var<uniform>f:aF;@group(0)@binding(1)var<storage>k:array<u32>;@group(0)@binding(2)var<storage>bS:array<aE>;struct e6{bc:u32,b5:u32}@group(0)@binding(3)var<storage>hG:array<e6>;@group(0)@binding(4)var<storage>dk:array<u32>;@group(0)@binding(5)var<storage>bE:array<cw>;@group(0)@binding(6)var<storage>N:array<be>;@group(0)@binding(7)var<storage,read_write>ad:eh;@group(0)@binding(8)var<storage,read_write>j:array<u32>;const h=256u;const b6=8u;var<workgroup>bs:array<array<atomic<u32>,aB>,b6>;var<workgroup>bC:array<u32,h>;var<workgroup>fZ:array<u32,h>;var<workgroup>dj:array<u32,h>;var<workgroup>eZ:array<u32,h>;var<workgroup>fY:array<u32,h>;var<workgroup>fX:array<u32,h>;var<workgroup>aZ:array<u32,h>;var<workgroup>eY:array<u32,h>;var<private>q:u32;var<private>eX:u32;fn cJ(size:u32){if q+size>=eX{let hP=f.aA*f.cB*d4;var dR=hP+atomicAdd(&ad.j,fc);if dR+fc>f.ii{dR=0u;atomicOr(&ad.af,iq);}j[q]=gu;j[q+1u]=dR;q=dR;eX=q+(fc-gF);}}fn dp(t:be,S:f32)->bool{cJ(3u);if S<0.{let cI=S<-1.;if t.W!=0u{let cv=fe(t.W,t.F);j[q]=gD;let hO=select(cv.t<<1u,(cv.t<<1u)|1u,cI);j[q+1u]=hO;j[q+2u]=u32(cv.F);q+=3u;}else{if cI&&(abs(t.F)&1)==0{return false;}j[q]=gB;q+=1u;}}else{let aO=fd(t.W,.5*S);j[q]=gC;j[q+1u]=aO.t;j[q+2u]=bitcast<u32>(aO.cS);q+=3u;}return true;}fn hT(bZ:d6){cJ(2u);j[q]=gA;j[q+1u]=bZ.cR;q+=2u;}fn f5(ty:u32,aK:u32,H:u32){cJ(3u);j[q]=ty;j[q+1u]=aK;j[q+2u]=H;q+=3u;}fn hS(H:u32){cJ(2u);j[q]=gx;j[q+1u]=H;q+=2u;}fn hR(){cJ(1u);j[q]=gw;q+=1u;}fn hQ(L:d5){cJ(23u);j[q]=gv;j[q+1u]=L.a2;j[q+2u]=bitcast<u32>(L.bw.x);j[q+3u]=bitcast<u32>(L.bw.y);j[q+4u]=bitcast<u32>(L.bw.z);j[q+5u]=bitcast<u32>(L.bw.w);j[q+6u]=bitcast<u32>(L.bv.x);j[q+7u]=bitcast<u32>(L.bv.y);j[q+8u]=bitcast<u32>(L.bv.z);j[q+9u]=bitcast<u32>(L.bv.w);j[q+10u]=bitcast<u32>(L.bu.x);j[q+11u]=bitcast<u32>(L.bu.y);j[q+12u]=bitcast<u32>(L.bu.z);j[q+13u]=bitcast<u32>(L.bu.w);j[q+14u]=bitcast<u32>(L.aU.x);j[q+15u]=bitcast<u32>(L.aU.y);j[q+16u]=bitcast<u32>(L.aU.z);j[q+17u]=bitcast<u32>(L.aU.w);j[q+18u]=bitcast<u32>(L.bf.x);j[q+19u]=bitcast<u32>(L.bf.y);j[q+20u]=bitcast<u32>(L.bf.z);j[q+21u]=bitcast<u32>(L.bf.w);j[q+22u]=select(0u,1u,L.cQ);q+=23u;}@compute @workgroup_size(256)fn main(@builtin(local_invocation_id)d:vec3u,@builtin(workgroup_id)ae:vec3u,){if d.x==0u{bC[0]=atomicLoad(&ad.af);}let af=workgroupUniformLoad(&bC[0]);if(af&(eg|fl|gX))!=0u{return;}let cM=(f.aA+a1- 1u)/a1;let du=cM*ae.y+ae.x;let dV=(f.cA+aB- 1u)/aB;let dU=a1*ae.x;let dT=cC*ae.y;let e2=d.x % a1;let e1=d.x/a1;let hN=(dT+e1)*f.aA+dU+e2;q=hN*d4;eX=q+(d4-gF);var dQ=0u;var a_=0u;var cH=0u;var cu=0u;var ct=0u;var e0=0u;var b3=0u;var e_=0u;var dP=0u;let f4=q;q+=1u;while true{for(var c=0u;c<b6;c+=1u){atomicStore(&bs[c][d.x],0u);}while true{if b3==ct&&cH<dV{e0=b3;var b2=0u;if cH+d.x<dV{let hM=(cH+d.x)*aB+du;let dt=hG[hM];b2=dt.bc;fZ[d.x]=dt.b5;}for(var c=0u;c<firstTrailingBit(h);c+=1u){bC[d.x]=b2;workgroupBarrier();if d.x>=(1u<<c){b2+=bC[d.x-(1u<<c)];}workgroupBarrier();}bC[d.x]=e0+b2;b3=workgroupUniformLoad(&bC[h- 1u]);cH+=h;}var i=cu+d.x;if i>=ct&&i<b3{var dl=0u;for(var c=0u;c<firstTrailingBit(h);c+=1u){let bt=dl+((aB/2u)>>c);if i>=bC[bt- 1u]{dl=bt;}}i-=select(e0,bC[dl- 1u],dl>0u);let aR=f.gQ+fZ[dl];dj[d.x]=dk[aR+i];}ct=min(cu+aB,b3);if ct-cu>=aB||(ct>=b3&&cH>=dV){break;}}var aQ=cz;var av:u32;if d.x+cu<ct{av=dj[d.x];aQ=k[f.cV+av];}var b1=0u;if aQ!=cz{let R=bS[av].R;let O=bE[R];let dn=O.e.z-O.e.x;eZ[d.x]=dn;let f3=i32(O.e.x)-i32(dU);let dm=i32(O.e.y)-i32(dT);let B=clamp(f3,0,i32(a1));let I=clamp(dm,0,i32(cC));let J=clamp(i32(O.e.z)-i32(dU),0,i32(a1));let M=clamp(i32(O.e.w)-i32(dT),0,i32(cC));fY[d.x]=u32(J-B);fX[d.x]=u32(B)|u32(I<<16u);b1=u32(J-B)*u32(M-I);let Z=O.N-u32(dm*i32(dn)+f3);eY[d.x]=Z;}aZ[d.x]=b1;for(var c=0u;c<firstTrailingBit(aB);c+=1u){workgroupBarrier();if d.x>=(1u<<c){b1+=aZ[d.x-(1u<<c)];}workgroupBarrier();aZ[d.x]=b1;}workgroupBarrier();let dS=aZ[aB- 1u];for(var i=d.x;i<dS;i+=aB){var aj=0u;for(var c=0u;c<firstTrailingBit(aB);c+=1u){let bt=aj+((aB/2u)>>c);if i>=aZ[bt- 1u]{aj=bt;}}av=dj[aj];aQ=k[f.cV+av];let d0=i-select(0u,aZ[aj- 1u],aj>0u);let b7=fY[aj];let f2=fX[aj];let x=(f2&0xffffu)+d0 % b7;let y=(f2>>16u)+d0/b7;let ay=eY[aj]+eZ[aj]*y+x;let t=N[ay];let f1=(aQ&1u)!=0u;var f_=false;if f1{let hL=(128u<<8u)|3u;let by=bS[av].by;let s=f.fi+by;let a2=k[s];f_=a2!=hL;}let hK=t.W!=0u||(t.F==0)==f1||f_;if hK{let hJ=aj/32u;let hI=1u<<(aj&31u);atomicOr(&bs[hJ][y*a1+x],hI);}}workgroupBarrier();var dO=0u;var cs=atomicLoad(&bs[0u][d.x]);while true{if cs==0u{dO+=1u;if dO==b6{break;}cs=atomicLoad(&bs[dO][d.x]);if cs==0u{continue;}}let aj=dO*32u+firstTrailingBit(cs);av=dj[aj];cs&=cs- 1u;let a8=k[f.cV+av];let f0=bS[av];let s=f.fi+f0.by;let Q=f0.H;if dQ==0u{let ay=eY[aj]+eZ[aj]*e1+e2;let t=N[ay];switch a8{case 66u:{let S=bitcast<f32>(dk[Q]);if dp(t,S){let cR=k[s];hT(d6(cR));}}case 0x10au:{let S=bitcast<f32>(dk[Q]);if dp(t,S){let aK=k[s];let H=Q+1u;f5(gz,aK,H);}}case 0x28eu:{let S=bitcast<f32>(dk[Q]);if dp(t,S){let aK=k[s];let H=Q+1u;f5(gy,aK,H);}}case 580u:{let S=bitcast<f32>(dk[Q]);if dp(t,S){hS(Q+1u);}}case 0x2bu:{if t.W==0u&&t.F==0{dQ=a_+1u;}else{hR();e_+=1u;dP=max(dP,e_);}a_+=1u;}case 1025u:{a_-=1u;dp(t,-1.);let a2=k[s];let bw=vec4(bitcast<f32>(k[s+1u]),bitcast<f32>(k[s+2u]),bitcast<f32>(k[s+3u]),bitcast<f32>(k[s+4u]));let bv=vec4(bitcast<f32>(k[s+5u]),bitcast<f32>(k[s+6u]),bitcast<f32>(k[s+7u]),bitcast<f32>(k[s+8u]));let bu=vec4(bitcast<f32>(k[s+9u]),bitcast<f32>(k[s+10u]),bitcast<f32>(k[s+11u]),bitcast<f32>(k[s+12u]));let aU=vec4(bitcast<f32>(k[s+13u]),bitcast<f32>(k[s+14u]),bitcast<f32>(k[s+15u]),bitcast<f32>(k[s+16u]));let bf=vec4(bitcast<f32>(k[s+17u]),bitcast<f32>(k[s+18u]),bitcast<f32>(k[s+19u]),bitcast<f32>(k[s+20u]));let cQ=bw.a!=0.||bv.a!=0.||bu.a!=0.||aU.r!=0.||aU.g!=0.||aU.b!=0.||aU.a!=1.||bf.a!=0.;hQ(d5(a2,bw,bv,bu,aU,bf,cQ));e_-=1u;}default:{}}}else{switch a8{case 0x2bu:{a_+=1u;}case 1025u:{if a_==dQ{dQ=0u;}a_-=1u;}default:{}}}}cu+=aB;if cu>=b3&&cH>=dV{break;}workgroupBarrier();}if dU+e2<f.aA&&dT+e1<f.cB{j[q]=gE;if dP>ee{let hH=dP*cD*bi;j[f4]=atomicAdd(&ad.a2,hH);}}}`
