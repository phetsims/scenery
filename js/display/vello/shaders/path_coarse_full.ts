/* eslint-disable */
import bump from './shared/bump.js';
import cubic from './shared/cubic.js';
import segment from './shared/segment.js';
import tile from './shared/tile.js';
import pathtag from './shared/pathtag.js';
import config from './shared/config.js';

export default `${config}
${pathtag}
${tile}
${segment}
${cubic}
${bump}
@group(0)@binding(0)var<uniform>_m:_aG;@group(0)@binding(1)var<storage>_n:array<u32>;@group(0)@binding(2)var<storage>_bV:array<_ad>;@group(0)@binding(3)var<storage>_cD:array<_fm>;@group(0)@binding(4)var<storage>_M:array<_aL>;struct _eJ{_B:atomic<i32>,_R:atomic<u32>}@group(0)@binding(5)var<storage,read_write>_ah:_eu;@group(0)@binding(6)var<storage,read_write>_w:array<_eJ>;@group(0)@binding(7)var<storage,read_write>_R:array<_dx>;struct _cp{_u:f32,a0:f32,a2:f32}const D=.67;fn _co(x:f32)->f32{return x*inverseSqrt(sqrt(1.-D+(D*D*D*D+.25*x*x)));}const B=.39;fn _cn(x:f32)->f32{return x*sqrt(1.-B+(B*B+.5*x*x));}fn _eI(p0:vec2<f32>,p1:vec2<f32>,p2:vec2<f32>,_cX:f32)->_cp{let _dj=p1-p0;let _di=p2-p1;let dd=_dj-_di;let _aX=(p2.x-p0.x)*dd.y-(p2.y-p0.y)*dd.x;let _dh=select(1./_aX,1.e9,abs(_aX)<1.e-9);let x0=dot(_dj,dd)*_dh;let x2=dot(_di,dd)*_dh;let _J=abs(_aX/(length(dd)*(x2-x0)));let a0=_co(x0);let a2=_co(x2);var _u=0.;if _J<1e9{let da=abs(a2-a0);let _dg=sqrt(_J);if sign(x0)==sign(x2){_u=_dg;}else{let _bQ=_cX/_dg;_u=_cX/_co(_bQ);}_u*=da;}return _cp(_u,a0,a2);}fn _eH(p0:vec2<f32>,p1:vec2<f32>,p2:vec2<f32>,t:f32)->vec2<f32>{let mt=1.-t;return p0*(mt*mt)+(p1*(mt*2.)+p2*t)*t;}fn _bM(p0:vec2<f32>,p1:vec2<f32>,p2:vec2<f32>,p3:vec2<f32>,t:f32)->vec2<f32>{let mt=1.-t;return p0*(mt*mt*mt)+(p1*(mt*mt*3.)+(p2*(mt*3.)+p3*t)*t)*t;}fn _eG()->u32{var _d=atomicAdd(&_ah._R,1u)+1u;if _d+1u>_m._io{_d=0u;atomicOr(&_ah._ac,_gV);}return _d;}const _df=16u;@compute @workgroup_size(256)fn main(@builtin(global_invocation_id)_G:vec3<u32>,){if(atomicLoad(&_ah._ac)&(_et|_fp))!=0u{return;}let ix=_G.x;let _D=_n[_m._dE+(ix>>2u)];let _bX=(ix&3u)*8u;var _bW=(_D>>_bX)&0xffu;if(_bW&_fk)!=0u{let _S=_cD[_G.x];let _c=_M[_S._P];let _fC=(_S._ae&_im)!=0u;let _b=vec4<i32>(_c._b);let p0=_S.p0;let p1=_S.p1;let p2=_S.p2;let p3=_S.p3;let _de=3.*(p2-p1)+p0-p3;let _bL=dot(_de,_de);let _aw=.25;let _cm=_aw*.1;let _dd=(_aw-_cm);let _eF=432.*_cm*_cm;var _bn=max(u32(ceil(pow(_bL*(1./_eF),1./6.))),1u);_bn=min(_bn,_df);var _cW:array<_cp,_df>;var _u=0.;var _aO=p0;let _aQ=1./f32(_bn);for(var i=0u;i<_bn;i+=1u){let t=f32(i+1u)*_aQ;let _aP=_bM(p0,p1,p2,p3,t);var _aN=_bM(p0,p1,p2,p3,t- .5*_aQ);_aN=2.*_aN- .5*(_aO+_aP);let _V=_eI(_aO,_aN,_aP,sqrt(_dd));_cW[i]=_V;_u+=_V._u;_aO=_aP;}let n=max(u32(ceil(_u*(.5/sqrt(_dd)))),1u);var _T=p0;_aO=p0;let _dc=_u/f32(n);var _bJ=1u;var _ck=0.;for(var i=0u;i<_bn;i+=1u){let t=f32(i+1u)*_aQ;let _aP=_bM(p0,p1,p2,p3,t);var _aN=_bM(p0,p1,p2,p3,t- .5*_aQ);_aN=2.*_aN- .5*(_aO+_aP);let _V=_cW[i];let u0=_cn(_V.a0);let u2=_cn(_V.a2);let _eE=1./(u2-u0);var _cj=f32(_bJ)*_dc;while _bJ==n||_cj<_ck+_V._u{var _ap:vec2<f32>;if _bJ==n{_ap=p3;}else{let u=(_cj-_ck)/_V._u;let a=mix(_V.a0,_V.a2,u);let au=_cn(a);let t=(au-u0)*_eE;_ap=_eH(_aO,_aN,_aP,t);}let _bK=min(_T,_ap)-_S._an;let _db=max(_T,_ap)+_S._an;let dp=_ap-_T;let _eD=1./dp.x;let _cl=select(dp.x/dp.y,1.e9,abs(dp.y)<1.e-9);let SX=1./f32(_cC);let SY=1./f32(_bk);let c=(_S._an.x+abs(_cl)*(.5*f32(_bk)+_S._an.y))*SX;let b=_cl;let a=(_T.x-(_T.y- .5*f32(_bk))*b)*SX;var x0=i32(floor(_bK.x*SX));var x1=i32(floor(_db.x*SX)+1.);var y0=i32(floor(_bK.y*SY));var y1=i32(floor(_db.y*SY)+1.);x0=clamp(x0,_b.x,_b.z);x1=clamp(x1,_b.x,_b.z);y0=clamp(y0,_b.y,_b.w);y1=clamp(y1,_b.y,_b.w);var xc=a+b*f32(y0);let _bR=_b.z-_b.x;var _t=i32(_c._w)+(y0-_b.y)*_bR-_b.x;var _E=i32(floor(_T.x*SX));var _ci=i32(floor(_ap.x*SX));if dp.y<0.{let _bp=_E;_E=_ci;_ci=_bp;}for(var y=y0;y<y1;y+=1){let _eC=f32(y)*f32(_bk);let _da=max(_E+1,_b.x);if!_fC&&_bK.y<_eC&&_da<_b.z{let _B=select(-1,1,dp.y<0.);let _ar=_t+_da;atomicAdd(&_w[_ar]._B,_B);}var _bI=_ci;if y+1<y1{let _eB=f32(y+1)*f32(_bk);let _eA=_T.x+(_eB-_T.y)*_cl;_bI=i32(floor(_eA*SX));}let _cZ=min(_E,_bI);let _cY=max(_E,_bI);var _ch=min(i32(floor(xc-c)),_cZ);var _cg=max(i32(ceil(xc+c)),_cY+1);_ch=clamp(_ch,x0,x1);_cg=clamp(_cg,x0,x1);var _ao:_dx;for(var x=_ch;x<_cg;x+=1){let _bA=f32(x)*f32(_cC);let _ar=_t+x;let _bo=_eG();let _dL=atomicExchange(&_w[_ar]._R,_bo);_ao._cw=_T;_ao._as=dp;var _aU=0.;if!_fC{_aU=mix(_T.y,_ap.y,(_bA-_T.x)*_eD);if _bK.x<_bA{let p=vec2(_bA,_aU);if dp.x<0.{_ao._as=p-_T;}else{_ao._cw=p;_ao._as=_ap-p;}if _ao._as.x==0.{_ao._as.x=sign(dp.x)*1e-9;}}if x<=_cZ||_cY<x{_aU=1e9;}}_ao._aU=_aU;_ao._aT=_dL;_R[_bo]=_ao;}xc+=b;_t+=_bR;_E=_bI;}_bJ+=1u;_cj+=_dc;_T=_ap;}_ck+=_V._u;_aO=_aP;}}}`
