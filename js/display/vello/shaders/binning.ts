/* eslint-disable */
import bump from './shared/bump.js';
import bbox from './shared/bbox.js';
import drawtag from './shared/drawtag.js';
import config from './shared/config.js';

export default `${config}
${drawtag}
${bbox}
${bump}
@group(0)@binding(0)var<uniform>_m:_aG;@group(0)@binding(1)var<storage>_bS:array<_aF>;@group(0)@binding(2)var<storage>_ic:array<_cf>;@group(0)@binding(3)var<storage>_ib:array<vec4<f32>>;@group(0)@binding(4)var<storage,read_write>_ia:array<vec4<f32>>;@group(0)@binding(5)var<storage,read_write>_ah:_eu;@group(0)@binding(6)var<storage,read_write>_bC:array<u32>;struct _fb{_aB:u32,_bs:u32}@group(0)@binding(7)var<storage,read_write>_cv:array<_fb>;const SX=.00390625;const SY=.00390625;const _j=256u;const _cc=8u;const _go=4u;var<workgroup>_br:array<array<atomic<u32>,_H>,_cc>;var<workgroup>_gj:array<array<u32,_H>,_go>;var<workgroup>_gi:array<u32,_H>;@compute @workgroup_size(256)fn main(@builtin(global_invocation_id)_G:vec3<u32>,@builtin(local_invocation_id)_f:vec3<u32>,@builtin(workgroup_id)_aj:vec3<u32>,){for(var i=0u;i<_cc;i+=1u){atomicStore(&_br[i][_f.x],0u);}workgroupBarrier();let _ef=_G.x;var x0=0;var y0=0;var x1=0;var y1=0;if _ef<_m._cz{let _ak=_bS[_ef];var _cJ=vec4(-1e9,-1e9,1e9,1e9);if _ak._ce>0u{_cJ=_ib[min(_ak._ce- 1u,_m._cT- 1u)];}let _U=_ic[_ak._P];let pb=vec4<f32>(vec4(_U.x0,_U.y0,_U.x1,_U.y1));let _b=_dJ(_cJ,pb);_ia[_ef]=_b;if _b.x<_b.z&&_b.y<_b.w{x0=i32(floor(_b.x*SX));y0=i32(floor(_b.y*SY));x1=i32(ceil(_b.z*SX));y1=i32(ceil(_b.w*SY));}}let _cK=i32((_m._aC+_bd- 1u)/_bd);let _gn=i32((_m._cA+_cB- 1u)/_cB);x0=clamp(x0,0,_cK);y0=clamp(y0,0,_gn);x1=clamp(x1,0,_cK);y1=clamp(y1,0,_gn);if x0==x1{y1=y0;}var x=x0;var y=y0;let _ee=_f.x/32u;let _fa=1u<<(_f.x&31u);while y<y1{atomicOr(&_br[_ee][y*_cK+x],_fa);x+=1;if x==x1{x=x0;y+=1;}}workgroupBarrier();var _aB=0u;for(var i=0u;i<_go;i+=1u){_aB+=countOneBits(atomicLoad(&_br[i*2u][_f.x]));let _if=_aB;_aB+=countOneBits(atomicLoad(&_br[i*2u+1u][_f.x]));let _ie=_aB;let _id=_if|(_ie<<16u);_gj[i][_f.x]=_id;}var _bs=atomicAdd(&_ah._dH,_aB);if _bs+_aB>_m._iq{_bs=0u;atomicOr(&_ah._ac,_et);}_gi[_f.x]=_bs;_cv[_G.x]._aB=_aB;_cv[_G.x]._bs=_bs;workgroupBarrier();x=x0;y=y0;while y<y1{let _dv=y*_cK+x;let _gm=atomicLoad(&_br[_ee][_dv]);if(_gm&_fa)!=0u{var _gk=countOneBits(_gm&(_fa- 1u));if _ee>0u{let _gl=_ee- 1u;let _eZ=_gj[_gl/2u][_dv];_gk+=(_eZ>>(16u*(_gl&1u)))&0xffffu;}let _d=_m._gO+_gi[_dv];_bC[_d+_gk]=_ef;}x+=1;if x==x1{x=x0;y+=1;}}}`
