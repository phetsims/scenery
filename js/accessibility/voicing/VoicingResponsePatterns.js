// Copyright 2021, University of Colorado Boulder

/**
 * A collection of string patterns that are used with VoicingManager.collectResponses. Responses for Voicing are
 * categorized into one of "Name", "Object", "Context", or "Hint" responses. A node that implements voicing may
 * have any number of these responses and each of these responses can be enabled/disabled by user preferences
 * through the Properties of voicingManager. So we need string patterns that include each combination of response.
 *
 * Furthermore, you may want to control the order, punctuation, or other content in these patterns, so the default
 * cannot be used. VoicingResponsePatterns will have a collections of patterns that may be generally useful. But if
 * you need a collection that is not provided here, you can use createResponsePatterns() to create an object based
 * on one of the pre-made collections in this file. If you need something totally different, create your own from
 * scratch. The object you create must have exactly the keys of DEFAULT_RESPONSE_PATTERNS.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import merge from '../../../../phet-core/js/merge.js';
import scenery from '../../scenery.js';

// constants
const NAME_KEY = 'NAME';
const OBJECT_KEY = 'OBJECT';
const CONTEXT_KEY = 'CONTEXT';
const HINT_KEY = 'HINT';

const VoicingResponsePatterns = {

  // Default order and punctuation for Voicing responses.
  DEFAULT_RESPONSE_PATTERNS: {
    nameObjectContextHint: '{{NAME}}, {{OBJECT}}, {{CONTEXT}} {{HINT}}',
    nameObjectContext: '{{NAME}}, {{OBJECT}}, {{CONTEXT}}',
    nameObjectHint: '{{NAME}}, {{OBJECT}}, {{HINT}}',
    nameContextHint: '{{NAME}}, {{CONTEXT}} {{HINT}}',
    nameObject: '{{NAME}}, {{OBJECT}}, ',
    nameContext: '{{NAME}}, {{CONTEXT}}',
    nameHint: '{{NAME}}, {{HINT}}',
    name: '{{NAME}}',
    objectContextHint: '{{OBJECT}}, {{CONTEXT}} {{HINT}}',
    objectContext: '{{OBJECT}}, {{CONTEXT}}',
    objectHint: '{{OBJECT}}, {{HINT}}',
    contextHint: '{{CONTEXT}} {{HINT}}',
    object: '{{OBJECT}} ',
    context: '{{CONTEXT}}',
    hint: '{{HINT}}'
  },

  /**
   * Create an Object containing patterns for responses that are generated by voicingManager.collectResponses. This
   * is convenient if you want to use one of the premade collections of patterns above, but have some of the patterns
   * slightly modified.
   * @public
   *
   * @param {Object} source - source for merge, probably one of the premade patterns objects in VoicingResponsPatterns
   * @param {Object} [options] - Object with keys that you want overridden
   * @returns {Object}
   */
  createResponsePatterns( source, options ) {
    const newPatterns = merge( {}, VoicingResponsePatterns.DEFAULT_RESPONSE_PATTERNS, options );
    VoicingResponsePatterns.validatePatternKeys( newPatterns );

    return newPatterns;
  },

  /**
   * Ensures that keys of the provided pattern will work voicingManager.collectResponses.
   * @public
   *
   * @param {Object} object
   */
  validatePatternKeys( object ) {
    assert && assert( _.difference( Object.keys( object ), Object.keys( VoicingResponsePatterns.DEFAULT_RESPONSE_PATTERNS ) ).length === 0,
      'keys for the created patterns will not work, they must match DEFAULT_RESPONSE_PATTERNS exactly.' );
  },

  /**
   * Create a key to be used to get a string pattern for a Voicing response. Assumes keys
   * are like those listed in DEFAULT_RESPONSE_PATTERNS.
   * @public
   *
   * @param {boolean} includeName
   * @param {boolean} includeObject
   * @param {boolean} includeContext
   * @param {boolean} includeHint
   * @returns {string} - string key, could be empty
   */
  createPatternKey( includeName, includeObject, includeContext, includeHint ) {
    let key = '';
    if ( includeName ) { key = key.concat( NAME_KEY.concat( '_' ) ); }
    if ( includeObject ) { key = key.concat( OBJECT_KEY.concat( '_' ) ); }
    if ( includeContext ) { key = key.concat( CONTEXT_KEY.concat( '_' ) ); }
    if ( includeHint ) { key = key.concat( HINT_KEY.concat( '_' ) ); }

    // convert to camel case and trim any underscores at the end of the string
    return _.camelCase( key );
  }
};

scenery.register( 'VoicingResponsePatterns', VoicingResponsePatterns );
export default VoicingResponsePatterns;
